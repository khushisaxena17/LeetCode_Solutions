/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     void helper(TreeNode* root,string path){
        if(root->left==NULL && root->right==NULL){
            reverse(path.begin(),path.end());
            result.push_back(path);
            // reverse(path.begin(),path.end());
            return;
        }
        if(root->left!=NULL){
            helper(root->left,path+(char)(root->left->val+'a'));
        }
        if(root->right!=NULL){
            helper(root->right,path+(char)(root->right->val+'a'));
        }
    }
    vector<string>result;
    string smallestFromLeaf(TreeNode* root) {
        string str="";
        helper(root,str+(char)(root->val+'a'));
        string rslt=*min_element(result.begin(),result.end());
        return rslt;
    }
};
